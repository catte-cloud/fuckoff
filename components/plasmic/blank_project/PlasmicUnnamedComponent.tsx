// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezT75DcpvKbBPxGoHLTCXX
// Component: e5EL2d-zw3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: ezT75DcpvKbBPxGoHLTCXX/projectcss
import sty from "./PlasmicUnnamedComponent.module.css"; // plasmic-import: e5EL2d-zw3/css

export type PlasmicUnnamedComponent__VariantMembers = {};

export type PlasmicUnnamedComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnnamedComponent__VariantsArgs;
export const PlasmicUnnamedComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUnnamedComponent__ArgsType = {};
type ArgPropType = keyof PlasmicUnnamedComponent__ArgsType;
export const PlasmicUnnamedComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicUnnamedComponent__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  _?: p.Flex<typeof p.PlasmicImg>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultUnnamedComponentProps {}

function PlasmicUnnamedComponent__RenderFunc(props: {
  variants: PlasmicUnnamedComponent__VariantsArgs;
  args: PlasmicUnnamedComponent__ArgsType;
  overrides: PlasmicUnnamedComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Stop."}</title>
        <meta key="og:title" property="og:title" content={"Stop."} />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={"Stop."}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.a, sty.link)}
            component={Link}
            href={"/burnt" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              data-plasmic-name={"_"}
              data-plasmic-override={overrides._}
              alt={"error.return();" as const}
              className={classNames(sty._)}
              displayHeight={"224px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/blank_project/images/logoBallSpng.png",
                fullWidth: 381,
                fullHeight: 171,
                aspectRatio: undefined
              }}
            />
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lls9E
            )}
          >
            {
              "48 65 6c 6c 6f 2c 20 4d 79 20 4e 61 6d 65 20 69 73 20 52 6f 62 20 50 65 74 65 72 73 6f 6e 2e 20 a a 41 6e 64 20 74 68 69 73 20 69 73 20 6d 79 20 64 65 76 2d 6c 6f 67 20 6f 6e 20 70 72 6f 6a 65 63 74 20 43 2e 53 2e 52 2e 44 2e 20 53 6f 20 66 61 72 2c 20 74 68 65 20 72 6f 62 6f 74 73 20 69 6e 20 74 68 65 20 70 72 6f 6a 65 63 74 2c 20 73 65 65 6d 20 74 6f 20 62 65 20 6d 6f 76 69 6e 67 20 61 6e 64 20 61 63 74 69 6e 67 20 6e 6f 72 6d 61 6c 6c 79 2c 20 65 76 65 6e 20 67 69 76 65 6e 20 74 68 61 74 20 69 20 68 61 76 65 6e 27 74 20 67 69 76 65 6e 20 74 68 65 6d 20 77 68 61 74 20 74 68 65 79 27 72 65 20 6e 6f 72 6d 61 6c 6c 79 20 62 75 69 6c 74 20 66 6f 72 2c 20 74 77 6f 20 6c 65 67 73 2c 20 74 77 6f 20 61 72 6d 73 2c 20 65 74 63 2e a a 54 68 65 79 20 73 65 65 6d 20 74 6f 20 67 65 74 20 61 20 67 72 61 73 70 20 6f 6e 20 68 6f 77 20 74 6f 20 77 61 6c 6b 20 61 6e 64 20 6d 6f 76 65 20 69 6d 6d 65 64 69 61 74 65 6c 79 2c 20 61 6e 64 20 6a 75 73 74 20 61 73 20 70 6c 61 6e 6e 65 64 2c 20 4d 4f 53 54 20 6f 66 20 74 68 65 6d 20 66 6f 6c 6c 6f 77 20 6d 79 20 6f 72 64 65 72 73 2e a a 49 20 53 61 79 20 6d 6f 73 74 2c 20 62 65 63 61 75 73 65 20 77 65 6c 6c 2e "
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__emH02
            )}
          >
            {
              "WHO ARE YOU \n\n\n\n\n\nW\n\n\n\n\n\n\n\n\nHOAR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
            }
          </div>

          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blank_project/images/baldiTalk0001Png.png",
              fullWidth: 226,
              fullHeight: 236,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "_", "img"],
  link: ["link", "_"],
  _: ["_"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  _: typeof p.PlasmicImg;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnnamedComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnnamedComponent__VariantsArgs;
    args?: PlasmicUnnamedComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnnamedComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnnamedComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUnnamedComponent__ArgProps,
      internalVariantPropNames: PlasmicUnnamedComponent__VariantProps
    });

    return PlasmicUnnamedComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnnamedComponent";
  } else {
    func.displayName = `PlasmicUnnamedComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicUnnamedComponent = Object.assign(
  // Top-level PlasmicUnnamedComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    _: makeNodeComponent("_"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicUnnamedComponent
    internalVariantProps: PlasmicUnnamedComponent__VariantProps,
    internalArgProps: PlasmicUnnamedComponent__ArgProps
  }
);

export default PlasmicUnnamedComponent;
/* prettier-ignore-end */
