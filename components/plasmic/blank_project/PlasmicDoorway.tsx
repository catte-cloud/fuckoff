// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezT75DcpvKbBPxGoHLTCXX
// Component: UqeW88rahH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: ezT75DcpvKbBPxGoHLTCXX/projectcss
import sty from "./PlasmicDoorway.module.css"; // plasmic-import: UqeW88rahH/css

export type PlasmicDoorway__VariantMembers = {};

export type PlasmicDoorway__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoorway__VariantsArgs;
export const PlasmicDoorway__VariantProps = new Array<VariantPropType>();

export type PlasmicDoorway__ArgsType = {};
type ArgPropType = keyof PlasmicDoorway__ArgsType;
export const PlasmicDoorway__ArgProps = new Array<ArgPropType>();

export type PlasmicDoorway__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  _?: p.Flex<typeof p.PlasmicImg>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultDoorwayProps {}

function PlasmicDoorway__RenderFunc(props: {
  variants: PlasmicDoorway__VariantsArgs;
  args: PlasmicDoorway__ArgsType;
  overrides: PlasmicDoorway__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Huh?"}</title>
        <meta key="og:title" property="og:title" content={"Huh?"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.a, sty.link)}
            component={Link}
            href={"/pleasestop" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              data-plasmic-name={"_"}
              data-plasmic-override={overrides._}
              alt={"error.return();" as const}
              className={classNames(sty._)}
              displayHeight={"224px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/blank_project/images/logoApng2.png",
                fullWidth: 381,
                fullHeight: 171,
                aspectRatio: undefined
              }}
            />
          </p.PlasmicLink>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___41E0Y
            )}
          >
            {
              "FAQ:\n\nQ: What is     y makes music, we⊇e discs, instruments, and music of our own.\n\nfree until the end of the m⊇\n\nQ: Can i bring food or dr.\n\n"
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3Gb6Z
            )}
          >
            {
              "Hello! Welcome to My Website, JakesMusicFactory.Plasmic.Site\n\nIf you would like a tour, ple\t‰me to: \n47.41016193420535, -84.015778⊇32\n\n\tja\n\nWe're waiting to show you around!\n\n\n"
            }
          </div>

          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blank_project/images/baldiTalk0001Png.png",
              fullWidth: 226,
              fullHeight: 236,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "_", "img"],
  link: ["link", "_"],
  _: ["_"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  _: typeof p.PlasmicImg;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoorway__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoorway__VariantsArgs;
    args?: PlasmicDoorway__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoorway__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDoorway__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDoorway__ArgProps,
      internalVariantPropNames: PlasmicDoorway__VariantProps
    });

    return PlasmicDoorway__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoorway";
  } else {
    func.displayName = `PlasmicDoorway.${nodeName}`;
  }
  return func;
}

export const PlasmicDoorway = Object.assign(
  // Top-level PlasmicDoorway renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    _: makeNodeComponent("_"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicDoorway
    internalVariantProps: PlasmicDoorway__VariantProps,
    internalArgProps: PlasmicDoorway__ArgProps
  }
);

export default PlasmicDoorway;
/* prettier-ignore-end */
