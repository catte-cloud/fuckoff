// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ezT75DcpvKbBPxGoHLTCXX
// Component: QhOtoSKDzb
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: ezT75DcpvKbBPxGoHLTCXX/projectcss
import sty from "./PlasmicUnnamedComponent2.module.css"; // plasmic-import: QhOtoSKDzb/css

export type PlasmicUnnamedComponent2__VariantMembers = {};

export type PlasmicUnnamedComponent2__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnnamedComponent2__VariantsArgs;
export const PlasmicUnnamedComponent2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUnnamedComponent2__ArgsType = {};
type ArgPropType = keyof PlasmicUnnamedComponent2__ArgsType;
export const PlasmicUnnamedComponent2__ArgProps = new Array<ArgPropType>();

export type PlasmicUnnamedComponent2__OverridesType = {
  root?: p.Flex<"div">;
  _?: p.Flex<typeof p.PlasmicImg>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultUnnamedComponent2Props {}

function PlasmicUnnamedComponent2__RenderFunc(props: {
  variants: PlasmicUnnamedComponent2__VariantsArgs;
  args: PlasmicUnnamedComponent2__ArgsType;
  overrides: PlasmicUnnamedComponent2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Please. Stop."}</title>
        <meta key="og:title" property="og:title" content={"Please. Stop."} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.PlasmicImg
            data-plasmic-name={"_"}
            data-plasmic-override={overrides._}
            alt={"error.return();" as const}
            className={classNames(sty._)}
            displayHeight={"224px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blank_project/images/logoBallSpng.png",
              fullWidth: 381,
              fullHeight: 171,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3UpM3
            )}
          >
            {"this hurts"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w31BQ
            )}
          >
            {
              "01101000 01100001 01110110 01100101 00100000 01111001 01101111 01110101 00100000 01100101 01110110 01100101 01110010 00100000 01100110 01100101 01101100 01110100 00100000 01111001 01101111 01110101 01110010 00100000 01100110 01101100 01100101 01110011 01101000 00100000 01100010 01110101 01110010 01101110 01101001 01101110 01100111 00100000 01100010 01100101 01100110 01101111 01110010 01100101 00111111"
            }
          </div>

          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"314px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blank_project/images/_3Png.png",
              fullWidth: 40,
              fullHeight: 79,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "_", "img"],
  _: ["_"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _: typeof p.PlasmicImg;
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnnamedComponent2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnnamedComponent2__VariantsArgs;
    args?: PlasmicUnnamedComponent2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnnamedComponent2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnnamedComponent2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUnnamedComponent2__ArgProps,
      internalVariantPropNames: PlasmicUnnamedComponent2__VariantProps
    });

    return PlasmicUnnamedComponent2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnnamedComponent2";
  } else {
    func.displayName = `PlasmicUnnamedComponent2.${nodeName}`;
  }
  return func;
}

export const PlasmicUnnamedComponent2 = Object.assign(
  // Top-level PlasmicUnnamedComponent2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _: makeNodeComponent("_"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicUnnamedComponent2
    internalVariantProps: PlasmicUnnamedComponent2__VariantProps,
    internalArgProps: PlasmicUnnamedComponent2__ArgProps
  }
);

export default PlasmicUnnamedComponent2;
/* prettier-ignore-end */
